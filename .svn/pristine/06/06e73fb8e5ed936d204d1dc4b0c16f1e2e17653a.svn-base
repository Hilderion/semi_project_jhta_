package kr.co.team2.dao;

import java.sql.SQLException;
import java.util.List;

import kr.co.team2.utils.SqlMapClientUtil;
import kr.co.team2.vo.Category;
import kr.co.team2.vo.Item;
import kr.co.team2.vo.Option;

public class ItemManagementDao {

	private static ItemManagementDao instance;
	private ItemManagementDao() {}
	public static ItemManagementDao getInstance() {
		if (instance == null) {
			instance = new ItemManagementDao();
		}
		return instance;
	}

	// 모든 상품 조회
	@SuppressWarnings("unchecked")
	public List<Item> getAllItems() throws SQLException {
		return (List<Item>) SqlMapClientUtil.getSqlMapClient().queryForList("getAllItems");
	}

	// 번호로 상품 조회
	public Item getItemByNo(int itemNo) throws SQLException {
		return (Item) SqlMapClientUtil.getSqlMapClient().queryForObject("getItemByNo", itemNo);
	}

	// 상위 카테고리 조회
	@SuppressWarnings("unchecked")
	public List<Category> getTopCategorys() throws SQLException {
		return (List<Category>) SqlMapClientUtil.getSqlMapClient().queryForList("getTopCategorys");
	}
	
	//번호로 카테고리 조회
	public Category getCategoryByNo(int cateNo) throws SQLException {
		return (Category) SqlMapClientUtil.getSqlMapClient().queryForObject("getCateByNo",cateNo);
	}

	// 하위 카테고리 조회
	@SuppressWarnings("unchecked")
	public List<Category> getChildCategorys(int categoryNo) throws SQLException {
		return (List<Category>)SqlMapClientUtil.getSqlMapClient().queryForList("getChildCategotys",categoryNo);
	}
	
	@SuppressWarnings("unchecked")
	public List<Option> getAllOptions()throws SQLException{
		return (List<Option>)SqlMapClientUtil.getSqlMapClient().queryForList("getAllOptions");
	}
	
	//아이템번호에 맞는 옵션 조회
	@SuppressWarnings("unchecked")
	public List<Option> getOptionByItemNo(int itemNo) throws SQLException{
		return (List<Option>)SqlMapClientUtil.getSqlMapClient().queryForList("getOptionByItemNo",itemNo);
	}
	//아이템 시퀀스 조회
	public int getItemSEQ()throws SQLException {
		return (Integer)SqlMapClientUtil.getSqlMapClient().queryForObject("getItemSEQ");
	}
	//아이템 생성
	public void addItem(Item item) throws SQLException{
		SqlMapClientUtil.getSqlMapClient().insert("addItem",item);
	}
	//옵션 생성
	public void addOption(Option option) throws SQLException{
		SqlMapClientUtil.getSqlMapClient().insert("addOption",option);
	}
	//하위카테고리 생성
	public void addparentsCategory(Category category) throws SQLException{
		SqlMapClientUtil.getSqlMapClient().insert("addParentsCategory",category);
	}
	//하위카테고리 생성
		public void addChildCategory(Category category) throws SQLException{
			SqlMapClientUtil.getSqlMapClient().insert("addChildCategory",category);
		}
	//하위 카테고리 삭제
	public void deleteChildCategory(int cateNo) throws SQLException{
		SqlMapClientUtil.getSqlMapClient().delete("deleteChildCategory",cateNo);
	}
	//아이템 삭제
	public void deleteItem(int itemNo) throws SQLException{
		SqlMapClientUtil.getSqlMapClient().delete("deleteItem",itemNo);
	}
	//옵션 삭제
	public void deleteOptionByItemNo(int itemNo) throws SQLException{
		SqlMapClientUtil.getSqlMapClient().delete("deleteOptionByItemNo",itemNo);
	}
	//아이템 업데이트
	public void updateItem(Item item) throws SQLException{
		SqlMapClientUtil.getSqlMapClient().update("updateItem",item);
	}
	
}
