package kr.co.team2.controller;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import javafx.scene.control.Pagination;
import kr.co.jhta.mvc.annotation.Controller;
import kr.co.jhta.mvc.annotation.RequestMapping;
import kr.co.jhta.mvc.servlet.JSONView;
import kr.co.jhta.mvc.servlet.ModelAndView;
import kr.co.team2.dao.ReviewDao;
import kr.co.team2.vo.AllReviews;
import kr.co.team2.vo.CriteriaTest;
import kr.co.team2.vo.Item;
import kr.co.team2.vo.PaginationTest;
import kr.co.team2.vo.PhotoReviews;
import kr.co.team2.vo.Review;

@Controller
public class ReviewController {

	@RequestMapping("/reviews/allreview.do")
	public ModelAndView allReview(HttpServletRequest request, HttpServletResponse response) throws Exception{
		
		ModelAndView mav = new ModelAndView();
		ReviewDao reviewDao = ReviewDao.getInstance();
		
		int cp = 1;
		int rows = 4;
		
		try {
			cp = Integer.parseInt(request.getParameter("cp"));
			rows = Integer.parseInt(request.getParameter("rows"));
		} catch (Exception e) {}
		
		CriteriaTest criteria = new CriteriaTest();
		criteria.setBeginIndex((cp-1)*rows +1);
		criteria.setEndIndex(cp*rows);
		
		int totalRows = reviewDao.getAllReviewsCount(criteria);
		PaginationTest pagination = new PaginationTest(cp, rows, totalRows);
		
		List<AllReviews> allReviews = reviewDao.getAllReviewsByCriteria(criteria);
		
		for(AllReviews allReview : allReviews) {
			
			// 리뷰 점수가 높은 3개를 뽑는다
			List<Review> reviews = reviewDao.getAllReviewsByItemNoTop3(allReview.getNo());
			
			// 리뷰 내용이 15자가 넘어가면 줄여주는 기능
			for(Review review : reviews) {
				String content = review.getContents();
				if(content.length() > 15) {
					content = content.substring(0,15);
					String colons = "...";
					content += colons;
					review.setContents(content);
				}
			}

			allReview.setReviews(reviews);
		}
		
		mav.addAttribute("allReviews", allReviews);
		mav.addAttribute("pagination", pagination);
		
		mav.setViewName("reviews/allreview.jsp");
		return mav;
		
	}

	@RequestMapping("/reviews/bestreview.do")
	public ModelAndView bestReview(HttpServletRequest request, HttpServletResponse response) throws Exception {
		
		ModelAndView mav = new ModelAndView();
		mav.setViewName("reviews/bestreview.jsp");
		return mav;
		
	}
	
	@RequestMapping("/reviews/photoreview.do")
	public ModelAndView getAllofPhotoReviews(HttpServletRequest request, HttpServletResponse response) throws Exception {
		
		ModelAndView mav = new ModelAndView();
		ReviewDao reviewDao = ReviewDao.getInstance();

		int cp = 1;
		int rows = 5;
		
		try {
			cp = Integer.parseInt(request.getParameter("cp"));
			rows = Integer.parseInt(request.getParameter("rows"));
		} catch (Exception e) {}
		
		CriteriaTest criteria = new CriteriaTest();
		criteria.setBeginIndex((cp-1)*rows +1);
		criteria.setEndIndex(cp*rows);
		
		int totalRows =  reviewDao.getPhotoReviewsCount(criteria);
		PaginationTest pagination = new PaginationTest(cp, rows, totalRows);
		
		// 모든 포토 리뷰 조회
		//List<PhotoReviews> photoReviews = reviewDao.getAllofPhotoReviews();
		List<PhotoReviews> photoReviews = reviewDao.getPhotoReviewsByCriteria(criteria);
		
		// 리뷰 내용이 15자가 넘어가면 줄여주는 기능
		for(PhotoReviews reviews : photoReviews) {
			String content = reviews.getContents();
			
			if(content.length() > 15) {
				content = content.substring(0,15);
				String colons = "...";
				content += colons;
				reviews.setContents(content);
			}
			
			Item item = reviewDao.getItemByReviewNo(reviews.getNo());
			reviews.setItem(item);
		}
		
		mav.addAttribute("photoReviews", photoReviews);
		mav.addAttribute("pagination", pagination);
		
		mav.setViewName("reviews/photoreview.jsp");
		return mav;
	}
	
	@RequestMapping("/reviews/detail.do")
	public ModelAndView photoReviewDetail2(HttpServletRequest request, HttpServletResponse response) throws Exception {
		
		ModelAndView mav = new ModelAndView();
		ReviewDao reviewDao = ReviewDao.getInstance();
		
		int reviewNo = Integer.parseInt(request.getParameter("reviewNo"));
		
		AllReviews allReviews =  reviewDao.getAllReviewByReviewNo(reviewNo);
		List<Review> reviews = new ArrayList<>();
		reviews.add(reviewDao.getPhotoReviewsByNo(reviewNo));
		allReviews.setReviews(reviews);
		
		// AJAX 데이터 추가
		mav.addAttribute("reviewJSON", allReviews);
		mav.setView(new JSONView());
		
		return mav;
	}

}
