package kr.co.team2.controller;

import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.catalina.mapper.Mapper;

import com.oreilly.servlet.MultipartRequest;
import com.oreilly.servlet.multipart.DefaultFileRenamePolicy;

import kr.co.jhta.mvc.annotation.Controller;
import kr.co.jhta.mvc.annotation.RequestMapping;
import kr.co.jhta.mvc.servlet.JSONView;
import kr.co.jhta.mvc.servlet.ModelAndView;
import kr.co.team2.service.admin.BoardManagementService;
import kr.co.team2.service.admin.ItemManagementService;
import kr.co.team2.service.admin.OrderManagementService;
import kr.co.team2.service.admin.UserManagementService;
import kr.co.team2.vo.Category;
import kr.co.team2.vo.Item;
import kr.co.team2.vo.Option;
import kr.co.team2.vo.Orders;

@Controller
public class AdminController {

	ItemManagementService itemService = new ItemManagementService();
	BoardManagementService boardService = new BoardManagementService();
	OrderManagementService orderSevice = new OrderManagementService();
	UserManagementService userService = new UserManagementService();

	/*
	 * 메인 화면
	 */
	@RequestMapping("/admin/main/home.do")
	public ModelAndView home(HttpServletRequest request, HttpServletResponse response) {
		ModelAndView mav = new ModelAndView();

		mav.setViewName("admin/etc/home.jsp");
		return mav;
	}

	/*
	 * 차트
	 */
	@RequestMapping("/admin/etc/charts.do")
	public ModelAndView chartList(HttpServletRequest request, HttpServletResponse response) {
		ModelAndView mav = new ModelAndView();

		mav.setViewName("admin/etc/charts.jsp");
		return mav;
	}

	/*
	 * 상품 등록 폼
	 */
	@RequestMapping("/admin/product/addform.do")
	public ModelAndView productAddform(HttpServletRequest request, HttpServletResponse response) throws SQLException {
		ModelAndView mav = new ModelAndView();

		List<Category> categorys = itemService.getTopCategorys();

		mav.addAttribute("topCategorys", categorys);
		mav.setViewName("admin/product/addform.jsp");
		return mav;
	}

	/*
	 * 상품 수정 폼
	 */
	@RequestMapping("/admin/product/modifyform.do")
	public ModelAndView productmodifyform(HttpServletRequest request, HttpServletResponse response)
			throws SQLException {
		ModelAndView mav = new ModelAndView();

		int itemNo = Integer.parseInt(request.getParameter("itemNo"));
		Item item = itemService.getItemByNo(itemNo);
		List<Category> categorys = itemService.getTopCategorys();

		mav.addAttribute("item", item);
		mav.addAttribute("topCategorys", categorys);
		mav.setViewName("admin/product/modifyform.jsp");
		return mav;
	}
	
	//상품 수정
	
	@RequestMapping("/admin/product/modify.do")
	public ModelAndView productModify(HttpServletRequest request, HttpServletResponse response)
			throws SQLException, IOException {
		ModelAndView mav = new ModelAndView();

		String saveDirectory = "C:/web_workspace/shopping/WebContent/images/items";
		System.out.println("경로: " + saveDirectory);
		int maxPostSize = 1024 * 1024 * 20;
		String encoding = "UTF-8";

		MultipartRequest mr = new MultipartRequest(request, saveDirectory, maxPostSize, encoding,
				new DefaultFileRenamePolicy());
		int no = Integer.parseInt(mr.getParameter("itemNo"));
		System.out.println(no);
		int childCategory = Integer.parseInt(mr.getParameter("childCategory"));
		String name = mr.getParameter("name");
		String contents = mr.getParameter("content");
		int price = Integer.parseInt(mr.getParameter("price"));
		int discount = Integer.parseInt(mr.getParameter("discount"));
		String display = mr.getParameter("display");
		String sell = mr.getParameter("sell");
		String image = mr.getFilesystemName("main");
		String option = mr.getParameter("option");

		Item item = itemService.getItemByNo(no);
		item.setNo(no);
		item.setName(name);
		item.setContents(contents);
		item.setPrice(price);
		item.setCurrentDiscount(discount);
		item.setDisplayAvailable(display);
		item.setSellAvailable(sell);
		item.setImage(image);
		Category category = new Category();
		category.setNo(childCategory);
		item.setCategory(category);

		// itemService.updateItem(item);
		if (!option.equals("")) {
			String[] optionsSplit = option.split(",");
			for (String var : optionsSplit) {
				String[] opts = var.split("&");
				Option opt = new Option();
				for (int i = 0; i <= opts.length - 1; i++) {
					if (i == 0) {
						opt.setColor(opts[i]);
					}
					if (i == 1) {
						opt.setSize(opts[i]);
					}
					if (i == 2) {
						opt.setStock(Integer.parseInt(opts[i]));
					}
					if (i == 3) {
						opt.setCurrentPrice(Integer.parseInt(opts[i]));
					}
					opt.setItem(item);
				}
				itemService.addOption(opt);
			}
		}

		mav.setViewName("admin/product/list.do");
		return mav;
	}

	/*
	 * 상품 등록
	 */
	@RequestMapping("/admin/product/add.do")
	public ModelAndView productAdd(HttpServletRequest request, HttpServletResponse response)
			throws SQLException, IOException {
		ModelAndView mav = new ModelAndView();

		String saveDirectory = "C:/web_workspace/shopping/WebContent/images/items";
		System.out.println("경로: " + saveDirectory);
		int maxPostSize = 1024 * 1024 * 20;
		String encoding = "UTF-8";

		MultipartRequest mr = new MultipartRequest(request, saveDirectory, maxPostSize, encoding,
				new DefaultFileRenamePolicy());
		int no = itemService.getItemSEQ();
		int childCategory = Integer.parseInt(mr.getParameter("childCategory"));
		String name = mr.getParameter("name");
		String contents = mr.getParameter("content");
		int price = Integer.parseInt(mr.getParameter("price"));
		int discount = Integer.parseInt(mr.getParameter("discount"));
		String display = mr.getParameter("display");
		String sell = mr.getParameter("sell");
		String image = mr.getFilesystemName("main");
		String option = mr.getParameter("option");
		Item item = new Item();
		item.setNo(no);
		item.setName(name);
		item.setContents(contents);
		item.setPrice(price);
		item.setCurrentDiscount(discount);
		item.setDisplayAvailable(display);
		item.setSellAvailable(sell);
		item.setImage(image);
		Category category = new Category();
		category.setNo(childCategory);
		item.setCategory(category);

		itemService.addItem(item);

		if (!option.equals("")) {
			String[] optionsSplit = option.split(",");
			for (String var : optionsSplit) {
				String[] opts = var.split("&");
				Option opt = new Option();
				for (int i = 0; i <= opts.length - 1; i++) {
					if (i == 0) {
						opt.setColor(opts[i]);
					}
					if (i == 1) {
						opt.setSize(opts[i]);
					}
					if (i == 2) {
						opt.setStock(Integer.parseInt(opts[i]));
					}
					if (i == 3) {
						opt.setCurrentPrice(Integer.parseInt(opts[i]));
					}
					opt.setItem(item);
				}
				itemService.addOption(opt);
			}
		}

		mav.setViewName("redirect:/admin/product/list.do");
		return mav;
	}

	/*
	 * Ajax Json 상품 삭제
	 */
	@RequestMapping("/admin/product/deleteItem.do")
	public ModelAndView deleteItem(HttpServletRequest request, HttpServletResponse response) throws SQLException {
		ModelAndView mav = new ModelAndView();
		int itemNo = Integer.parseInt(request.getParameter("itemNo"));
		String result = "";
		try {
			itemService.deleteItem(itemNo);
			result = "OK";
		} catch (Exception e) {
			e.printStackTrace();
			System.err.println("오류: 상품 삭제중 문제가 발생하였습니다.");
			result = "NO";
		}
		mav.addAttribute("result", result);
		mav.setView(new JSONView());
		return mav;
	}

	/*
	 * Ajax Json 하위 카테고리 조회
	 */
	@RequestMapping("/admin/product/childCategory.do")
	public ModelAndView getChildCategorys(HttpServletRequest request, HttpServletResponse response)
			throws SQLException {
		ModelAndView mav = new ModelAndView();

		List<Category> categorys = itemService.getChildCategorys(Integer.parseInt(request.getParameter("categoryNo")));

		mav.addAttribute("childCategorys", categorys);
		mav.setView(new JSONView());
		return mav;
	}

	/*
	 * Ajax Json 하위 카테고리 삭제
	 */
	@RequestMapping("/admin/product/deleteChild.do")
	public ModelAndView adeleteChildCategory(HttpServletRequest request, HttpServletResponse response)
			throws SQLException {
		ModelAndView mav = new ModelAndView();
		int cateNo = Integer.parseInt(request.getParameter("cateNo"));
		String result = "";
		try {
			itemService.deleteChildCategory(cateNo);
			result = "OK";
		} catch (Exception e) {
			System.err.println("오류: 카테고리 삭제중 문제가 발생하였습니다.");
			result = "NO";
		}
		mav.addAttribute("result", result);
		mav.setView(new JSONView());
		return mav;
	}

	/*
	 * 카테고리 생성..
	 */
	@RequestMapping("/admin/product/addCategory.do")
	public ModelAndView addCategory(HttpServletRequest request, HttpServletResponse response) throws SQLException {
		ModelAndView mav = new ModelAndView();
		int cateSubNo = 0;
		String contents;
		Category category = new Category();
		if (request.getParameter("cateNo") != null) {
			cateSubNo = Integer.parseInt(request.getParameter("cateNo"));
			contents = request.getParameter("contents");
			category.setContents(contents);
			category.setSubNo(cateSubNo);
		} else {
			contents = request.getParameter("contents");
			category.setContents(contents);
		}
		String result = "";
		try {
			itemService.addCategory(category);
			result = "OK";
		} catch (Exception e) {
			e.printStackTrace();
			System.err.println("오류: 카테고리 생성중 문제가 발생하였습니다.");
			result = "NO";
		}
		mav.addAttribute("result", result);
		mav.setView(new JSONView());
		return mav;
	}

	/*
	 * 상품 목록
	 */
	@RequestMapping("/admin/product/list.do")
	public ModelAndView productList(HttpServletRequest request, HttpServletResponse response) throws SQLException {
		ModelAndView mav = new ModelAndView();

		List<Item> items = itemService.getAllItems();

		request.setAttribute("items", items);
		mav.setViewName("admin/product/list.jsp");
		return mav;
	}

	/*
	 * Ajax Json 상품 디테일
	 */
	@RequestMapping("/admin/product/detail.do")
	public ModelAndView productDetail(HttpServletRequest request, HttpServletResponse response) throws SQLException {
		ModelAndView mav = new ModelAndView();
		Item item = itemService.getItemByNo(Integer.parseInt(request.getParameter("itemNo")));

		mav.addAttribute("item", item);
		mav.setView(new JSONView());
		return mav;
	}

	@RequestMapping("/admin/product/category.do")
	public ModelAndView category(HttpServletRequest request, HttpServletResponse response) throws SQLException {
		ModelAndView mav = new ModelAndView();

		List<Category> categorys = itemService.getTopCategorys();

		mav.addAttribute("categorys", categorys);
		mav.setViewName("admin/product/category.jsp");
		return mav;
	}

	@RequestMapping("/admin/product/stock.do")
	public ModelAndView stock(HttpServletRequest request, HttpServletResponse response) {
		ModelAndView mav = new ModelAndView();

		mav.setViewName("admin/product/stock.jsp");
		return mav;
	}

	@RequestMapping("/admin/order/list.do")
	public ModelAndView orderList(HttpServletRequest request, HttpServletResponse response) {
		ModelAndView mav = new ModelAndView();
		List<Orders> orders = null;
		mav.setViewName("admin/order/list.jsp");
		return mav;
	}

	@RequestMapping("/admin/order/mgt.do")
	public ModelAndView orderManagement(HttpServletRequest request, HttpServletResponse response) {
		ModelAndView mav = new ModelAndView();

		mav.setViewName("admin/order/mgt.jsp");
		return mav;
	}

	@RequestMapping("/admin/user/list.do")
	public ModelAndView userList(HttpServletRequest request, HttpServletResponse response) {
		ModelAndView mav = new ModelAndView();

		mav.setViewName("admin/user/list.jsp");
		return mav;
	}

	@RequestMapping("/admin/user/mgt.do")
	public ModelAndView userManagement(HttpServletRequest request, HttpServletResponse response) {
		ModelAndView mav = new ModelAndView();

		mav.setViewName("admin/user/mgt.jsp");
		return mav;
	}

	@RequestMapping("/admin/user/log.do")
	public ModelAndView loginLog(HttpServletRequest request, HttpServletResponse response) {
		ModelAndView mav = new ModelAndView();

		mav.setViewName("admin/user/log.jsp");
		return mav;
	}

	@RequestMapping("/admin/board/board.do")
	public ModelAndView boardList(HttpServletRequest request, HttpServletResponse response) {
		ModelAndView mav = new ModelAndView();

		mav.setViewName("admin/board/boardlist.jsp");
		return mav;
	}

	@RequestMapping("/admin/board/reviews.do")
	public ModelAndView reviewList(HttpServletRequest request, HttpServletResponse response) {
		ModelAndView mav = new ModelAndView();

		mav.setViewName("admin/board/reviewlist.jsp");
		return mav;
	}

}
